# NOTE: update this with your service name
service: agency-services-transunion

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  bundle:
    external: all
    linting: false
  snsProxy: !Sub '${self:provider.stage}-api-endpoints-sns-proxy'
  settings:
    GRAPHQL_APIENDPOINTOUTPUT: !ImportValue GraphQLAPIEndpointOutput
    IDENTITY_IDS:
      dev: 'us-east-2:69169c15-c0c4-4e0b-886c-4afab307e612'
      qa: 'us-east-2:69169c15-c0c4-4e0b-886c-4afab307e612'
      prod: 'us-east-2:ea31caf7-0945-4607-a3c4-0c9942967a32'
    POOL_IDS:
      dev: 'us-east-2_beTcykTM9'
      qa: 'us-east-2_beTcykTM9'
      prod: 'us-east-2_R22DawoAR'
    GRAPHQL_API:
      dev: 'rr5wtr4ev5exlbutrkih3r5lhq'
      qa: 'rr5wtr4ev5exlbutrkih3r5lhq'
      prod: '4tpaga7rzjayhk75opsmpeurme'
    GRAPHQL_ENDPOINT:
      dev: '24ga46y3gbgodogktqwhh7vryq.appsync-api.us-east-2.amazonaws.com'
      qa: '24ga46y3gbgodogktqwhh7vryq.appsync-api.us-east-2.amazonaws.com'
      prod: 'krybm5pc3nbgdk4zwgcva2i4va.appsync-api.us-east-2.amazonaws.com'
    APPDATA_STREAMS:
      dev: 'rr5wtr4ev5exlbutrkih3r5lhq:GetAtt:AppDataTable:StreamArn'
      qa: 'rr5wtr4ev5exlbutrkih3r5lhq:GetAtt:AppDataTable:StreamArn'
      prod: '4tpaga7rzjayhk75opsmpeurme:GetAtt:AppDataTable:StreamArn'
    APPTABLES:
      dev: 'AppData-rr5wtr4ev5exlbutrkih3r5lhq-dev'
      prod: 'AppData-4tpaga7rzjayhk75opsmpeurme-prod'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  layers:
    - !Ref TuCertsLambdaLayer
  environment:
    NODE_ENV: ${opt:stage, 'dev'}
    TU_ENV: ${self:provider.stage}
    TU_SECRET_LOCATION: '${self:provider.stage}/agency-services/transunion'
    API_ERROR_LOG_TABLE: 'APIErrorLog'
    API_TRANSACTION_LOG_TABLE: 'APITransactionLog'
    DISPUTES_TABLE: 'Disputes'
    CREDIT_BUREAU_TABLE: 'CreditBureauReportResults'
    INVESTIGATION_RESULTS_TABLE: 'InvestigationResults'
    CREDIT_SCORE_UPDATES_TABLE: 'CreditScoreTrackings'
    ACCOUNT_ID: !Sub '${AWS::AccountId}'
    IDENTITY_ID: '${self:custom.settings.IDENTITY_IDS.${opt:stage}}'
    POOL_ID: '${self:custom.settings.POOL_IDS.${opt:stage}}'
    APPSYNC_ENDPOINT: '${self:custom.settings.GRAPHQL_ENDPOINT.${opt:stage}}'
    APPSYNC_API: '${self:custom.settings.GRAPHQL_API.${opt:stage}}'
    TU_SNS_PROXY_ARN: !Ref TransunionSNSTopic
    APPTABLE: ${self:custom.settings.APPTABLES.${opt:stage}}
  vpc:
    securityGroupIds:
      - !GetAtt NatGatewayLambdaSecurityGroup.GroupId
    subnetIds:
      - !Ref SubnetAPrivate
      - !Ref SubnetBPrivate
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - secretsmanager:GetSecretValue
      Resource:
        - '*'
    - Effect: Allow
      Resource:
        - !Sub 'arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${self:custom.settings.GRAPHQL_API.${opt:stage}}/types/Query/*'
        - !Sub 'arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${self:custom.settings.GRAPHQL_API.${opt:stage}}/types/Mutation/*'
        - !Sub 'arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${self:custom.settings.GRAPHQL_API.${opt:stage}}/types/Subscription/*'
      Action: 'appsync:GraphQL'
    - Effect: 'Allow'
      Action: 'sns:Publish'
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - dynamodb:ListStreams
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.API_ERROR_LOG_TABLE}'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.API_TRANSACTION_LOG_TABLE}'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.DISPUTES_TABLE}'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.APPTABLE}'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.CREDIT_BUREAU_TABLE}'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.INVESTIGATION_RESULTS_TABLE}'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.CREDIT_SCORE_UPDATES_TABLE}'

layers:
  TuCerts:
    path: tucerts

functions:
  graphql:
    handler: src/handlers/graphql.main
    timeout: 60
    layers:
      - { Ref: TuCertsLambdaLayer }
  alertNotificationService:
    handler: src/handlers/transunion/alertNotificationService.main
    timeout: 60
    layers:
      - { Ref: TuCertsLambdaLayer }
    events:
      - schedule: cron(0 16 * * ? *)
  creditScoreUpdatesService:
    handler: src/handlers/transunion/creditScoreUpdatesService.main
    timeout: 720
    layers:
      - { Ref: TuCertsLambdaLayer }
    events:
      - schedule: cron(0 14 18 * ? *)
  creditScoreUpdatesManual:
    handler: src/handlers/transunion/creditScoreUpdatesManual.main
    timeout: 720
    layers:
      - { Ref: TuCertsLambdaLayer }
  creditScoreUpdatesWorker:
    handler: src/handlers/transunion/creditScoreUpdatesWorker.main
    timeout: 720
    reservedConcurrency: 5
    layers:
      - { Ref: TuCertsLambdaLayer }
    events:
      - sqs:
          arn: !GetAtt
            - TransunionQueue
            - Arn
          batchSize: 100
          maximumBatchingWindow: 5
          # filterPatterns:
          #   - service: ['creditscoreupdates']
  cancelEnrollmentManual:
    handler: src/handlers/transunion/cancelEnrollmentManual.main
    timeout: 720
    layers:
      - { Ref: TuCertsLambdaLayer }
  cancelEnrollmentWorker:
    handler: src/handlers/transunion/cancelEnrollmentWorker.main
    timeout: 720
    reservedConcurrency: 5
    layers:
      - { Ref: TuCertsLambdaLayer }
    events:
      - sqs:
          arn: !GetAtt
            - TransunionQueue
            - Arn
          batchSize: 100
          maximumBatchingWindow: 5
          filterPatterns:
            - service: ['cancelenrollment']
  triggerCreateCreditScoreTracking:
    handler: src/triggers/triggerCreateCreditScoreTracking.main
    timeout: 900
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn:
            Fn::ImportValue: '${self:custom.settings.APPDATA_STREAMS.${opt:stage}}'

  # SNS_PROXY_ARN: !ImportValue ${self:custom.snsProxy}

resources:
  Resources:
    CreditScoreTrackings:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'userId'
            AttributeType: 'S'
          - AttributeName: 'bureauId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'userId'
            KeyType: 'HASH'
          - AttributeName: 'bureauId'
            KeyType: 'RANGE'
        BillingMode: PAY_PER_REQUEST
        TableName: CreditScoreTrackings
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    InvestigationResults:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
          - AttributeName: 'userId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
          - AttributeName: 'userId'
            KeyType: 'RANGE'
        BillingMode: PAY_PER_REQUEST
        TableName: InvestigationResults
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    CreditBureauReportResults:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
          - AttributeName: 'userId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
          - AttributeName: 'userId'
            KeyType: 'RANGE'
        BillingMode: PAY_PER_REQUEST
        TableName: CreditBureauReportResults
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    Disputes:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
          - AttributeName: 'disputeId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
          - AttributeName: 'disputeId'
            KeyType: 'RANGE'
        BillingMode: PAY_PER_REQUEST
        TableName: Disputes
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    APIErrorLog:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'userId'
            AttributeType: 'S'
          - AttributeName: 'errorId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'userId'
            KeyType: 'HASH'
          - AttributeName: 'errorId'
            KeyType: 'RANGE'
        BillingMode: PAY_PER_REQUEST
        TableName: APIErrorLog
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    APITransactionLog:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'userId'
            AttributeType: 'S'
          - AttributeName: 'transactionId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'userId'
            KeyType: 'HASH'
          - AttributeName: 'transactionId'
            KeyType: 'RANGE'
        BillingMode: PAY_PER_REQUEST
        TableName: APITransactionLog
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    VPC:
      Type: 'AWS::EC2::VPC'
      Properties:
        CidrBlock: !Sub '10.0.0.0/16'
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
    InternetGateway:
      Type: 'AWS::EC2::InternetGateway'
      Properties:
        Tags:
          - Key: Name
            Value: !Sub '10.0.0.0/16'
    VPCGatewayAttachment:
      Type: 'AWS::EC2::VPCGatewayAttachment'
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

    # public and private subnets
    SubnetAPublic:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select [0, !GetAZs '']
        CidrBlock: !Sub '10.0.0.0/20'
        MapPublicIpOnLaunch: true
        VpcId: !Ref VPC
    SubnetAPrivate:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select [0, !GetAZs '']
        CidrBlock: !Sub '10.0.128.0/20'
        VpcId: !Ref VPC
    SubnetBPublic:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select [1, !GetAZs '']
        CidrBlock: !Sub '10.0.16.0/20'
        MapPublicIpOnLaunch: true
        VpcId: !Ref VPC
    SubnetBPrivate:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select [1, !GetAZs '']
        CidrBlock: !Sub '10.0.144.0/20'
        VpcId: !Ref VPC

    # public and private route tables
    RouteTableAPublic:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref VPC
    RouteTableAPrivate:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref VPC
    RouteTableBPublic:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref VPC
    RouteTableBPrivate:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref VPC

    # public and private table associations
    RouteTableAssociationAPublic:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref SubnetAPublic
        RouteTableId: !Ref RouteTableAPublic
    RouteTableAssociationAPrivate:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref SubnetAPrivate
        RouteTableId: !Ref RouteTableAPrivate
    RouteTableAssociationBPublic:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref SubnetBPublic
        RouteTableId: !Ref RouteTableBPublic
    RouteTableAssociationBPrivate:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref SubnetBPrivate
        RouteTableId: !Ref RouteTableBPrivate

    # public internet routes
    RouteTablePublicAInternetRoute:
      Type: 'AWS::EC2::Route'
      DependsOn: VPCGatewayAttachment
      Properties:
        RouteTableId: !Ref RouteTableAPublic
        DestinationCidrBlock: '0.0.0.0/0'
        GatewayId: !Ref InternetGateway
    RouteTablePublicBInternetRoute:
      Type: 'AWS::EC2::Route'
      DependsOn: VPCGatewayAttachment
      Properties:
        RouteTableId: !Ref RouteTableBPublic
        DestinationCidrBlock: '0.0.0.0/0'
        GatewayId: !Ref InternetGateway

    # elastic IPs
    EIPA:
      Type: 'AWS::EC2::EIP'
      Properties:
        Domain: vpc
    EIPB:
      Type: 'AWS::EC2::EIP'
      Properties:
        Domain: vpc
    EIPC:
      Type: 'AWS::EC2::EIP'
      Properties:
        Domain: vpc

    # nat gateways and private routes
    NatGatewayA:
      Type: 'AWS::EC2::NatGateway'
      Properties:
        AllocationId: !GetAtt 'EIPA.AllocationId'
        SubnetId: !Ref SubnetAPublic
    RouteA:
      Type: 'AWS::EC2::Route'
      Properties:
        RouteTableId: !Ref RouteTableAPrivate
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NatGatewayA
    NatGatewayB:
      Type: 'AWS::EC2::NatGateway'
      Properties:
        AllocationId: !GetAtt 'EIPB.AllocationId'
        SubnetId: !Ref SubnetBPublic
    RouteB:
      Type: 'AWS::EC2::Route'
      Properties:
        RouteTableId: !Ref RouteTableBPrivate
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NatGatewayB

    # security group
    NatGatewayLambdaSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        VpcId: !Ref VPC
        GroupDescription: 'Security group for NAT Gateway Lambda'
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0

    TransunionSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.stage}-${self:service}-sns-topic

    # Create our 'TransunionQueue' SQS queue for batch operations
    TransunionQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:provider.stage}-${self:service}-sqs
        DelaySeconds: 3
        ReceiveMessageWaitTimeSeconds: 20
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt
            - TransunionQueueDLQ
            - Arn
          maxReceiveCount: 3
        VisibilityTimeout: 720

    # Create our 'TransunionQueue' Dead Letter Queue SQS queue
    TransunionQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.stage}-${self:service}-dlq
        ReceiveMessageWaitTimeSeconds: 20

    # Create our queue policy for the 'TransunionQueue'
    SnsToTransunionQueueSqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: 'allow-sns-messages'
              Effect: Allow
              Principal: '*'
              Resource: !GetAtt
                - TransunionQueue
                - Arn
              Action: 'SQS:SendMessage'
              Condition:
                ArnEquals:
                  'aws:SourceArn': !Ref TransunionSNSTopic
        Queues:
          - Ref: TransunionQueue

    # Create the subscription from the transunion SQS to the SNS proxy'
    TransunionQueueSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: !Ref TransunionSNSTopic
        Endpoint: !GetAtt
          - TransunionQueue
          - Arn
        Protocol: sqs
        FilterPolicy:
          service:
            - transunionbatch
            - creditscoreupdates
            - cancelenrollment
        RawMessageDelivery: 'true'

  Outputs:
    Disputes:
      Description: 'Disputes'
      Value: !Ref Disputes
      Export:
        Name: !Sub '${self:service}-disputes'
    DisputesTableStreamArn:
      Value: { 'Fn::GetAtt': ['Disputes', 'StreamArn'] }
      Export:
        Name: !Sub '${self:service}-disputes-stream'
    InvestigationResults:
      Description: 'InvestigationResults'
      Value: !Ref InvestigationResults
      Export:
        Name: !Sub '${self:service}-investigationresults'
    InvestigationResultsTableStreamArn:
      Value: { 'Fn::GetAtt': ['InvestigationResults', 'StreamArn'] }
      Export:
        Name: !Sub '${self:service}-investigationresults-stream'
    CreditBureauReportResults:
      Description: 'CreditBureauReportResults'
      Value: !Ref CreditBureauReportResults
      Export:
        Name: !Sub '${self:service}-creditbureaureportresults'
    CreditBureauReportResultsTableStreamArn:
      Value: { 'Fn::GetAtt': ['CreditBureauReportResults', 'StreamArn'] }
      Export:
        Name: !Sub '${self:service}-creditbureau-stream'
    CreditScoreTrackings:
      Description: 'CreditScoreTrackings'
      Value: !Ref CreditScoreTrackings
      Export:
        Name: !Sub '${self:service}-creditscoretrackings'
    CreditScoreTrackingsTableStreamArn:
      Value: { 'Fn::GetAtt': ['CreditScoreTrackings', 'StreamArn'] }
      Export:
        Name: !Sub '${self:service}-creditscoretrackings-stream'
    VPC:
      Description: 'VPC'
      Value: !Ref VPC
      Export:
        Name: !Sub '${self:service}-vpc'
    SubnetsPublic:
      Description: 'Subnets public'
      Value: !Join [',', [!Ref SubnetAPublic, !Ref SubnetBPublic]]
    SubnetsPrivate:
      Description: 'Subnets private'
      Value: !Join [',', [!Ref SubnetAPrivate, !Ref SubnetBPrivate]]
      Export:
        Name: !Sub '${self:service}-subnets-private'
    NatSecurityGroup:
      Description: 'Nat Gateway Security Group'
      Value: !Join [',', [!Ref NatGatewayLambdaSecurityGroup]]
      Export:
        Name: !Sub '${self:service}-vpc-natsecuritygroup'
