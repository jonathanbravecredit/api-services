# NOTE: update this with your service name
service: credit-report-services-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  bundle:
    linting: false

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  environment:
    OUR_ENV: ${self:provider.stage}
    SECURITY_GROUPS: !ImportValue agency-services-transunion-vpc-natsecuritygroup
    SUBNETS: !ImportValue agency-services-transunion-subnets-private
    CREDITREPORT_SQS_ARN: !ImportValue credit-report-service-resources-sqs-arn
  vpc:
    securityGroupIds: { 'Fn::Split': [',', { 'Fn::ImportValue': 'agency-services-transunion-vpc-natsecuritygroup' }] }
    subnetIds: { 'Fn::Split': [',', { 'Fn::ImportValue': 'agency-services-transunion-subnets-private' }] }
  apiGateway:
    restApiId: !ImportValue credit-report-services-credit-reports-apigw-id
    restApiRootResourceId: credit-report-services-credit-reports-apigw-rootresource

functions:
  getCreditReport:
    handler: src/api/creditreports/get.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - http:
          path: creditreport
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: !ImportValue credit-report-services-credit-reports-authorizer

  createCreditReport:
    handler: src/subs/creditreports/create.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - sqs:
          arn: !Sub '${self:provider.environment.CREDITREPORT_SQS_ARN}'
          batchSize: 1
          maximumBatchingWindow: 5
