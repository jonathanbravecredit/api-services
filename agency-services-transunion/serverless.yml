# NOTE: update this with your service name
service: agency-services-transunion

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  bundle:
    external: all
    linting: false
  snsProxy: !Sub '${self:provider.stage}-api-endpoints-sns-proxy'
  settings:
    GRAPHQL_APIENDPOINTOUTPUT: !ImportValue GraphQLAPIEndpointOutput
    GRAPHQL_API:
      dev: 'rr5wtr4ev5exlbutrkih3r5lhq'
    GRAPHQL_ENDPOINT:
      dev: 'https://24ga46y3gbgodogktqwhh7vryq.appsync-api.us-east-2.amazonaws.com/graphql'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  layers:
    - !Ref TuCertsLambdaLayer
  environment:
    NODE_ENV: development
    SNS_PROXY_ARN: !ImportValue ${self:custom.snsProxy}
    TU_SECRET_LOCATION: '${self:provider.stage}/agency-services/transunion'
    APPSYNC_ENDPOINT: '${self:custom.settings.GRAPHQL_ENDPOINT.${opt:stage}}'
    APPSYNC_API: '${self:custom.settings.GRAPHQL_API.${opt:stage}}'
  vpc:
    securityGroupIds:
      - !GetAtt NatGatewayLambdaSecurityGroup.GroupId
    subnetIds:
      - !Ref SubnetAPrivate
      - !Ref SubnetBPrivate
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - secretsmanager:GetSecretValue
      Resource:
        - '*'
    - Effect: Allow
      Resource:
        - !Sub 'arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${self:custom.settings.GRAPHQL_API.${opt:stage}}/types/Query/*'
        - !Sub 'arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${self:custom.settings.GRAPHQL_API.${opt:stage}}/types/Mutation/*'
        - !Sub 'arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${self:custom.settings.GRAPHQL_API.${opt:stage}}/types/Subscription/*'
      Action: 'appsync:GraphQL'

layers:
  TuCerts:
    path: tucerts

functions:
  graphql:
    handler: src/handlers/graphql.main
    layers:
      - { Ref: TuCertsLambdaLayer }
  postRequests:
    handler: src/handlers/postRequests.main
    layers:
      - { Ref: TuCertsLambdaLayer }
    events:
      - sns:
          arn: ${self:provider.environment.SNS_PROXY_ARN}
          topicName: SnsProxyTopic
          integration: lambda-proxy
          filterPolicy:
            service:
              - 'transunion'

resources:
  Resources:
    # LambdaExecutionRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     RoleName: !Sub 'braveappAgencyLambdaRole-${opt:stage}'
    #     AssumeRolePolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Service: appsync.amazonaws.com
    #           Action: sts:AssumeRole
    # lambdaexecutionpolicy:
    #   DependsOn:
    #     - 'LambdaExecutionRole'
    #   Type: AWS::IAM::Policy
    #   Properties:
    #     PolicyName: lambda-execution-policy
    #     Roles:
    #       - { Ref: LambdaExecutionRole }
    #     PolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #         - Effect: Allow
    #           Action:
    #             - logs:CreateLogGroup
    #             - logs:CreateLogStream
    #             - logs:PutLogEvents
    #           Resource:
    #             - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${self:service}-${opt:stage}-graphql:log-stream:*'
    # AmplifyResourcesPolicy:
    #   DependsOn:
    #     - 'LambdaExecutionRole'
    #   Type: AWS::IAM::Policy
    #   Properties:
    #     PolicyName: amplify-lambda-execution-policy
    #     Roles:
    #       - { Ref: LambdaExecutionRole }
    #     PolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #         - Effect: Allow
    #           Action:
    #             - appsync:GraphQL
    #           Resource:
    #             - !Sub 'arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${self:custom.settings.GRAPHQL_API.${opt:stage}}/types/Query/*'
    #             - !Sub 'arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${self:custom.settings.GRAPHQL_API.${opt:stage}}/types/Mutation/*'
    #             - !Sub 'arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${self:custom.settings.GRAPHQL_API.${opt:stage}}/types/Subscription/*'
    # TransunionData:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     AttributeDefinitions:
    #       - AttributeName: 'id'
    #         AttributeType: 'S'
    #     KeySchema:
    #       - AttributeName: 'id'
    #         KeyType: 'HASH'
    #     BillingMode: PAY_PER_REQUEST
    #     TableName: ${self:provider.environment.TABLENAME}
    #     StreamSpecification:
    #       StreamViewType: NEW_AND_OLD_IMAGES

    VPC:
      Type: 'AWS::EC2::VPC'
      Properties:
        CidrBlock: !Sub '10.0.0.0/16'
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
    InternetGateway:
      Type: 'AWS::EC2::InternetGateway'
      Properties:
        Tags:
          - Key: Name
            Value: !Sub '10.0.0.0/16'
    VPCGatewayAttachment:
      Type: 'AWS::EC2::VPCGatewayAttachment'
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

    # public and private subnets
    SubnetAPublic:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select [0, !GetAZs '']
        CidrBlock: !Sub '10.0.0.0/20'
        MapPublicIpOnLaunch: true
        VpcId: !Ref VPC
    SubnetAPrivate:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select [0, !GetAZs '']
        CidrBlock: !Sub '10.0.128.0/20'
        VpcId: !Ref VPC
    SubnetBPublic:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select [1, !GetAZs '']
        CidrBlock: !Sub '10.0.16.0/20'
        MapPublicIpOnLaunch: true
        VpcId: !Ref VPC
    SubnetBPrivate:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select [1, !GetAZs '']
        CidrBlock: !Sub '10.0.144.0/20'
        VpcId: !Ref VPC

    # public and private route tables
    RouteTableAPublic:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref VPC
    RouteTableAPrivate:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref VPC
    RouteTableBPublic:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref VPC
    RouteTableBPrivate:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref VPC

    # public and private table associations
    RouteTableAssociationAPublic:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref SubnetAPublic
        RouteTableId: !Ref RouteTableAPublic
    RouteTableAssociationAPrivate:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref SubnetAPrivate
        RouteTableId: !Ref RouteTableAPrivate
    RouteTableAssociationBPublic:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref SubnetBPublic
        RouteTableId: !Ref RouteTableBPublic
    RouteTableAssociationBPrivate:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref SubnetBPrivate
        RouteTableId: !Ref RouteTableBPrivate

    # public internet routes
    RouteTablePublicAInternetRoute:
      Type: 'AWS::EC2::Route'
      DependsOn: VPCGatewayAttachment
      Properties:
        RouteTableId: !Ref RouteTableAPublic
        DestinationCidrBlock: '0.0.0.0/0'
        GatewayId: !Ref InternetGateway
    RouteTablePublicBInternetRoute:
      Type: 'AWS::EC2::Route'
      DependsOn: VPCGatewayAttachment
      Properties:
        RouteTableId: !Ref RouteTableBPublic
        DestinationCidrBlock: '0.0.0.0/0'
        GatewayId: !Ref InternetGateway

    # elastic IPs
    EIPA:
      Type: 'AWS::EC2::EIP'
      Properties:
        Domain: vpc
    EIPB:
      Type: 'AWS::EC2::EIP'
      Properties:
        Domain: vpc
    EIPC:
      Type: 'AWS::EC2::EIP'
      Properties:
        Domain: vpc

    # nat gateways and private routes
    NatGatewayA:
      Type: 'AWS::EC2::NatGateway'
      Properties:
        AllocationId: !GetAtt 'EIPA.AllocationId'
        SubnetId: !Ref SubnetAPublic
    RouteA:
      Type: 'AWS::EC2::Route'
      Properties:
        RouteTableId: !Ref RouteTableAPrivate
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NatGatewayA
    NatGatewayB:
      Type: 'AWS::EC2::NatGateway'
      Properties:
        AllocationId: !GetAtt 'EIPB.AllocationId'
        SubnetId: !Ref SubnetBPublic
    RouteB:
      Type: 'AWS::EC2::Route'
      Properties:
        RouteTableId: !Ref RouteTableBPrivate
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NatGatewayB

    # security group
    NatGatewayLambdaSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        VpcId: !Ref VPC
        GroupDescription: 'Security group for NAT Gateway Lambda'
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0

    # Create our 'TransunionQueue' SQS queue
    TransunionQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:provider.stage}-${self:service}-sqs
        ReceiveMessageWaitTimeSeconds: 20
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt
            - TransunionQueueDLQ
            - Arn
          maxReceiveCount: 3

    # Create our 'TransunionQueue' Dead Letter Queue SQS queue
    TransunionQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.stage}-${self:service}-dlq
        ReceiveMessageWaitTimeSeconds: 20

    # Create our queue policy for the 'TransunionQueue'
    SnsToTransunionQueueSqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: 'allow-sns-messages'
              Effect: Allow
              Principal: '*'
              Resource: !GetAtt
                - TransunionQueue
                - Arn
              Action: 'SQS:SendMessage'
              Condition:
                ArnEquals:
                  'aws:SourceArn': ${self:provider.environment.SNS_PROXY_ARN}
        Queues:
          - Ref: TransunionQueue

    # Create the subscription from the transunion SQS to the SNS proxy'
    TransunionQueueSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: ${self:provider.environment.SNS_PROXY_ARN}
        Endpoint: !GetAtt
          - TransunionQueue
          - Arn
        Protocol: sqs
        FilterPolicy:
          service:
            - 'transunion:batch'
        RawMessageDelivery: 'true'

  Outputs:
    VPC:
      Description: 'VPC'
      Value: !Ref VPC
      Export:
        Name: !Sub '${self:service}-vpc'
    SubnetsPublic:
      Description: 'Subnets public'
      Value: !Join [',', [!Ref SubnetAPublic, !Ref SubnetBPublic]]
    SubnetsPrivate:
      Description: 'Subnets private'
      Value: !Join [',', [!Ref SubnetAPrivate, !Ref SubnetBPrivate]]
      Export:
        Name: !Sub '${self:service}-subnets-private'
    NatSecurityGroup:
      Description: 'Nat Gateway Security Group'
      Value: !Join [',', [!Ref NatGatewayLambdaSecurityGroup]]
      Export:
        Name: !Sub '${self:service}-vpc-natsecuritygroup'
